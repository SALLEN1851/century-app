generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  WhoopCycle    WhoopCycle[]
  WhoopRecovery WhoopRecovery[]
  WhoopSleep    WhoopSleep[]
  WhoopWorkout  WhoopWorkout[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  refresh_token     String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WhoopCycle {
  id        String    @id @default(cuid())
  userId    String
  whoopId   Int       @unique
  startedAt DateTime
  endedAt   DateTime?
  payload   Json
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model WhoopRecovery {
  id         String   @id @default(cuid())
  userId     String
  whoopId    Int      @unique
  recordedAt DateTime
  score      Float?
  payload    Json
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WhoopSleep {
  id        String    @id @default(cuid())
  userId    String
  whoopId   Int       @unique
  startedAt DateTime
  endedAt   DateTime?
  payload   Json
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model WhoopWorkout {
  id        String    @id @default(cuid())
  userId    String
  whoopId   Int       @unique
  startedAt DateTime
  endedAt   DateTime?
  sport     String?
  strain    Float?
  payload   Json
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
